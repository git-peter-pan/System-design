Scenario: case/interface
Necessary: constrain/hypothesis
step1:ask daily active users
step2:predict 
user
	daily_active_users
	average conccurent users = daily_active_users/daily_senconds*average_online_time
这个指标不对，系统能力取决于高峰时间能力
	peak_users = average conccurent users  * 6
//要预测未来，可能三个月以后上市，
max_peak_users in 3 months = peak_users*2 

估算流量：
Traffic
	traffic per user = 3 mbps(video)
	max_peak_traffic = max_peak_users*traffic_per_second = 1,250,000*3mbps=3.75 Tb/s(>30% of US traffic)

Memory
	memory_per_user = 10kb
	Max_daily_memory = 5,000,000*2*10(3 months later) = 100GB

Storage
	total movie = 14,000(movies)
	movie_storage = total_movie*average_movie_size = 14,000*50G(different resolution)= 700 TB

Application:service/algorithm
	模块设计

kilobit:data

	user service: mysql,
	channel service:mongoDB
	movie: file
Evolve: 
	step1: analyze
		with
			better:constrains
			broder:new cases
			deeper:details
		from the views of
			performance
			scalability
			robustness
	step2: goback by evolving accordingly

SNAKE:
	scenario
	neccessary
	application
	kilobit
	Evolve




WEB CRAWLER && TINY URL
design crawler
design thread-safe consumer and producer(Amazon) CAN PRACTISE URSELF
design a tinyurl CAN PRACTISE URSELF

interview : let's implement on singers

based on data: web pages--information collection --database -- information retrieval--(rank, search, recommend)
rank, search and recommand can combine into rank
if rank and recommand use different datasets, rank based on clicks, recommand based on social graph, you'd better
seperate them.

crawl:(python)
url = 'http://xxx/xxx/xxx.shtml'; 
request = urllib2.Request(url); //write a letter
response = urllib2.urlopen(request); //send the letter and get the reply
page = response.read(); // read the reply
//save the source file
webFile = open('webPage.html', 'wb')
webFile.write(page); 

interview: what is the process druing crawler

crawler: socket() -- > connect() -- > read() write() -- > close()
web server: socket() ->bind() -- >listen() -> accept() -> read /write()
similar like call center
http connection
syn - syn-ack - ack 1st

http application layer
socket abstract layer for under layers
TCP /UDP transportation layer
IP network layer
Hardware interface link layer

What is HTML
html uses a tree to represent a page
svg: scalable vector graphics(SVG)

INTERVIEW:crawl all the news of a website:
crawl all the news page
identify the list page
http://yue.ifen.com/news/list_0/0.shtml
list_0 .... can increase maybe
0.shtml can increase maybe 
regex:

ans:
import re;
 pattern = re.compile("<a href="http://yue.ifeng.com/news/detail_(.*?)"target="_blank">(.*?)</a>', re.S);
.: any character
*: zero or more 
?: zero or one
items = re.findall(patter, page);

architecture(v1)
List crawler -> links of news -> news crawler -> pages of news

Interview: crawl more page
architecture(v2)
ifen.com-                         - many ifeng.com(new crawler)
sina.com-scheduler(links of news) - many sina.com -- page of news
163.com-                          - many 163.com
Interview: drawback of this architecture
news cralwer can be used repeatly.

architecture:
many crawler 
scheduler(two strategy: list, news)
task table: task id, priority(list > url), type(page_ifen, list_163), state(done, working, new), link, 
available time(), endTime

INTERVIEWER: design a scheduler? producer and consumer model
Solution with sleep
while(true)
	lock(tasktable);
	while tasktable.find("stat == new") == null
		release(tasktable);
		sleep(1s);
	end while
	lock(tasktable);
	task = tasktable.findone("state == new");
	task.state = "working";
	release(tasktable);

	page=crawl(task.url);

	if task.type == list;
		lock(tasktable);
		for newtask in page
		 	tasktable.add(newTask);
		 	task.state = "done";
		 release(tasktable);
	else
		lock(tasktable);
		pageTable.add(page);
		release(tasktable);
end while
INTERVIEW: SOMETHING WRONG WITH THE CODE
state in else wasn't set up
lock(tasktable);
task.state = "done";
release(tasktable);

INTERVIWER: DESIGN SCHEDULER WITH CONDITIONAL VARIABLE(ask frequently)
modify:
while( tasktable.find(state == new))
	cond_wait.add(cond, tasktable)
	...
tasktable.add(newtask);
con_signal(cond);// after crawler is empty

conditional variable
cond_wait(cond, mutex)
 lock(cond.threadWaitList);
 cond.threadWaitList.add(this.thread);
 release(cond.threaWaitList);

 relaese(mutex);
 block(this.thread);
 lock(mutex);

 cond_signal(cond)
 	lock(cond.threadWaitList);
 	if(cond.threadWaitlist.size() > 0) 
 		thread = cond.threadwaitlist.pop();
 		wakeup(thread);
 	relaese(cond.threadwaitlist);

 Interview: implement with semaphone
 see the ppt

 INTERVIEW: DESIGN THE FASTEST consumer and producer
 disruptor(bonus);

 interview: find the duplicate 
 find the longest sentence in two pages and compare
 what if minor different
 find the longest substring.

 INTERVIEW : ADVAN conditional variable  vs. sleep
 latency sleep(1s);
 thread wake up and sleep frequently.

 exPOnential latency
 sleep 10ms, 100ms, 1s

 INTERVIEW: DISTRIBUTE CRAWLERS IN MULTIPLE MACHINES( distributed crawlers);
 diagram:ppt
 INTERVIEW: DRAWBACK
 TOO MANY CONNECTORS
 SENDER AND RECEIVER
 INTERVIEW: IS THAT GOOD?
 CONNECTION BECOME MORE. BUT NOT THE PROBLEM.
 CAN USE LESS MODULE, REUSE THE CONNECTOR. SIMPLER ARCHITECTURE.
 need 2 semaphone
 SOLUTION WITH DATABASE

 tiny url: start from twitter, only can tweet 140 characters
 design in microcosmic doesn't need to strictly obey the SNAKE

 API: 
 long to short 
 short to long
 statistics

 ALG:
  long to short
  data structure:90% use hash(wrong, not neccesary)

  brute force: count++ every time, jz.com/$count
  become too long after one year

  necessary
  daily active users
  1m
  insert:
  perday 1m *1%(function usage)*10(function frequency)=100k
  per year 100k * 265 = 36.5m;
  persecond 100k/86400 = 1.2 < 100qps, one machine can handle
  lookup
  per day: 1m * 100%(function usage) * 3(function frequency) = 3m;
  per second 3m/86400 = 35; peak = 35* 2 * 5 

  algorithm:
  2 maps/ 2 tables
  long to short 
  short to long

  generateShorURL()
  	return String(mLongToShort.size());

  may conflict

  INTERVIEW : how to reduce the size of map
  Yearly URL 36.5m
  usable characters[0-9] = 10;
  encoding length = log10(36.5m) = 7.6 = 8;
  example goo.gl/36500000


  improve
  usable characters
  [0-9a-zA-Z]: easy to type
  log62(36.5m) = 4.2
  example: goo.gl/2t9jG

  String ConvertTo62(int number) 
  	char Encode[62] = {'0',....,'9','a',...,'z','A',...,'Z'};
  	String res = "";
  	while(number)
  		res = Encode[number%62] + res;
  		number /= 62;
  	return res;

 Kilobit
 average size of longURL = 100bytes
 average size of shortURL = 4bytes(int)
 state = 4 byte(expired , not availabe)
 daily new URL = 100k * 100 = 10.8mb
 yearly new URL = 10.8MB*365 = 4GB < 1TB can handle by memory
 database: mysql or NoSQL

 INTERVIEW : URL POLLUTION(BAD POLLUTION)
 input same ip more than 5 times, need to identify security code

 FOLLOW UP
 HOW TO SUPPORT RANDOM
 random(0, range);
 How to avoid conflicting 
 try again, low probability

 How to implement time-limited service?
 exipire/state
 how to cache
 pre-load & wait limit
 replacement

 HOW TO SUPPORT ANALYSIS
 A LOG:
 date:
 time:
 referer
 ip
 country
 to
 browser
 platform

 bucket 
 last two hour buckets
 last day buckets
 last week bukcets: doesn't need to store data, because is caculated in last month
 last month buckets
 all time buckets

 use log to update all the bucket table
o(4)
 web crawler: less in 1 min;

  	
check deadlock
runtime tons of times
rules check, 
see details on FQA

system design 4
WEB SERVICE AND RATE LIMITER

What happens when you visite google.com in your browser
How to increase visiiting speed of a webpage?

Design “instant kill/ seckilling" system
chanllenge: high qps =1k or 10k or average qps
design rate limiter: limit users rather than let the website crack

INTERVIEW : MANY users complain that htye cannot usr our radio, please do sth!
STEP1:

leadership: give expilicitly order(step by step) other than general order(find the reason)
anaysis problem 5 steps:
1.define problem, understand the problem exactly
how to define cannot use our radio: failure rate= percentage of users can't listen to music proply
= number of user who fail to play one music / number of total users
better than failure musics/ total mussics, 
focus on user
Mission: reduce failure rate

how to get the number of total users
a1: ip , not good, school will use the same ip outside(but many users);

内网：即所说的局域网，比如学校的局域网，局域网内每台计算机的IP地址在本局域网内具有互异性，是不可重复的。但两个局域网内的内网IP可以有相同的。
    外网：即互联网，局域网通过一台服务器或是一个路由器对外连接的网络，这个IP地址是惟一的。也就是说内网里所有的计算机都是连接到这一个外网IP上，通过这一个外网IP对外进行交换数据的。也就是说，一个局域网里所有电脑的内网IP是互不相同的,但共用一个外网IP。（用ipconfig/all查到的IP是你本机的内网IP；在www.ip138.com上看到的是你连接互联网所使用的IP，即外网）

a2: session(not good), a user may use differen devices,

a3: mac address, sometime cannot get the mac address, especially in mobile devices.

a1, a2 is acceptable. 
session: semi-permanent interactive information interchange, also known as a dialogue between 
two or more communicating devices, or between server and client.

cookies, session

recommand in website: cookie

shopping cart synchronize: login anynmous, put some goods in the shopping cart,
when login, these goods are put this user's shopping cart automatically
INTERVIEW: how to do that
sol1: login in set new cookie. check the old cookie has commodities, combine to the new cookies
automatically or manually.

INTERVIEW CASE 2: put commodity in mobile, put commodity in pc
usually not syn
sol: write them into database. based on userID

interview: how to notice between mobile and web browser
make state connection with server
or server listen for update commodity

INTERVIEW: how to collect the data of failure rate
check the log
log: 
a user will send a log to server when it visits our website
a user will send another log to server when it plays music

problem with this mode: 
send 2 logs
only play music log is neccessary, the server can log automatically when a user visits our website.
a user only need to send a log to server when play music

visite but not play music consider as a failure, but it's acceptable.

what is the process of playing music

broswer -> DNS(address to ip) 
 |
 server

 seeing is believing


what is the process of playing music
browser check thire cache first, if not, 
1. prepare(understand and built socket)

2.send DNS request
3.prepare dns request(if dns server didnt found asker other)
4.send dns replay 
5.process dns reply

6.send webpage request
7.prepare webpage reply
8.send webpage reply
9.process webpage

10.request music player 
11.prepare music player
12. send music player
13.process music

14. request MP3
15. prepare MP3
16. send MP3
17. play MP3

vpn, WHERE IS VPN, FROM STEP2.

where is the problem?
failure rate = 20%
= 8%(DNS) + 5%(WEB) + 2%(PLAYER) + 5%(MP3)
interview: how can we get so specific failure rate
log every step

NEXT STEP: FIND the largest number
INTERVIEW: HOW CAN WE FIND DNS FAILURE rate, if fail cannot visite website, will not send the log to ur server

has application on mobile
process of DNS
DNS is districuted system.s
1.check local hosts file(cache)
2.ask DNS Server
3.check itself or ask others
4.send ip address back

hijack DNS
127.0.0.1 urweb.com

WHY some competiros in music industry will hijack the DNS of others when a user install their 
software.
SOLUTION: hosts file analysis by our software

step 2: 
DNS server analysis by ISP(INTERVIEW service provider)
WHY CSTNET fails to update our latest DNS after we changed our server address
Solution
 make a phone call

step4:
send ip address back(hijacked by middleman);


after solving that, other increases failure rates
WHY: other increase because more sucess in DNS
WHY STILL 1%, 
reason1: some company don't allow to visited these website
reason2: greatwall block

fix the web problem
solution 1: reverse proxy with more servers: load balance
solution 2: reduce the size of webpage
simplify content rewrite the js code, save 10%
compress/merge images(reduce request times, dont need header every time), from 300 dpi to 72dpi, save 40%
lazy load, load visable part first, when scroll to the invisible part then load, save 70%
preload

solution 3: more cacheable pages.
change dynamic webpage into static webpage.
??proxy vs reverse proxy
http://blog.csdn.net/m13666368773/article/details/8060481
after that
web failure 4% reason: many users will cose the webpage as soon as they open it.

INTERVIEW why increase load speed can help solve failure rate:
ans: they will close if load speed is too slow, usually 3 seconds.

fix the MP3 problem
ndx: reverse proxy, application layer

process anaysis:
step13, failed to send the request
step14, network 3% timeout 0.01%
step15, fail to establish connection 0.01%, fail to find mp3 file 1%
step16 network errors 0.01% timeout 1%
step17 fail to play

cdn???: content delivery network
ping all cdn and find the best one

cannot play flash
solution: develop HTML5 player

INTERVIEW: HOW TO MAKE SURE THAT YOU HAVE SOLVED THESE PROBLEMS?
ANS: measure number of daily complains. (user oriented!!!)

INTERVIEW : WILL this fixation increase our daily active users?
can we measure daily active users every day? no, affect by too many factors.

one day retention rate
the number of users visited on both dayx and day(x+1)/the number of users on day(x)



rate limiter:limit qps
INTERVIEW LIMIT qps = 5;
sol: the gap between two request >= 1/5s
too restrict 0.0, 0,2, 0,3(rejected)
INTERVIEW five in a second
algorithm of time-bucket
0s 5buckets
1s 5 buckets
Acquire() 
	s = GetCurrentSecond();
	if(mCounterp[s] >= 5) 
		return false;
	else 
		mCounter[s]++;
		return true;

INTERVIWER: do it with database
what if 6th request in this second? drop(limit) or wait(others)


Acquire() 
	s = GetCurrentSecond();
	if(mCounterp[s] >= 5) 
		return false;
	else 
		mCounter[s]++;
		return true;
		counter = Database.get(s);
		if(count != null && count == 5) 
			return false;
		else 
			database.increase(s,1);
			database.expire(s,1);//in order to delete in next second

INTERVIEW: Save space
algorithm of one-bucket
Acquire() 
	s = GetCurrentSecond();
	if(s != mPreSecond)
		mcounter = 0;
		mPreSecond = currentSecond;
	if(mCounterp[s] >= 5) 
		return false;
	else 
		mCounter[s]++;
		return true;

Bad case:
1.2, 1.3, 1.5, 1.7, 1.8, 2.1
6 requests in 2.1-1.2 = 0.9s;
solution: sliding window

Acquire() 
	s = GetCurrentSecond();
	preFifthTime = mRequestList[mRequestList.size() - 5];
	if(currentSecond - preFifthSecond > 1) 
		mRequestList.append(currentTime);
		return true;
	else 
		return false;

Problem list get very long after a period of time
solution: loop array or queue(push or pop)

Acquire() 
	s = GetCurrentSecond();
	if(currentTime - musicRequestList[mPtr] > 1)
		mRequestList[mPtr] = currentTime;
		mPtr = (mPtr+1)%5;
		return true;
	else 
		false

how to save space with 10^9 qps?
open a 10^9 array?
solution batch queries
How to support multiple threads?
lock
How to support limiter on users?
<uid, requestList>
How to support query with different quotas?
quota??




























